name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build (${{ matrix.os }} / ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: commucat-cli-client-linux-amd64.tar.gz
            binary: commucat-cli-client
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: commucat-cli-client-macos-arm64.tar.gz
            binary: commucat-cli-client
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: commucat-cli-client-windows-amd64.zip
            binary: commucat-cli-client.exe
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Install codec dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libopus-dev libvpx-dev cmake nasm

      - name: Install codec dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config opus libvpx cmake nasm

      - name: Install codec dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install --no-progress -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install --no-progress -y nasm
          choco install --no-progress -y openssl.light
          choco install --no-progress -y libvpx
          choco install --no-progress -y opus

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} dist/
          cp README.md dist/README.md
          tar -czf ${{ matrix.archive }} -C dist ${{ matrix.binary }} README.md

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target\${{ matrix.target }}\release\${{ matrix.binary }} dist\
          Copy-Item README.md dist\README.md
          Compress-Archive -Path dist\* -DestinationPath $env:ARCHIVE -Force
        env:
          ARCHIVE: ${{ matrix.archive }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive }}
          path: ${{ matrix.archive }}
          if-no-files-found: error

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
          generate_release_notes: true
